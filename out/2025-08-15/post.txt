ðŸ”® AWS DMS in 18 months: Improve AWS DMS continuous replication performance by using column filters to parallelize high-volume tables

Parallelism helps, but correctness comes first. Iâ€™ve shipped this with strict validation before turning the dial. The direction of travel is clear from roadmaps and asks.

â€¢ Choose a stable filter (tenant_id / region / hash) to avoid collisions. Expect this to become table-stakes.
â€¢ Start with 2â€“3 tasks per hot table, watch latency + CPU before scaling further. Expect this to become table-stakes.
â€¢ Validate row counts and conflict handling; automate a post-cutover diff. Expect this to become table-stakes.
â€¢ Track end-to-end lag in CloudWatch; alert on trend, not single spikes. Expect this to become table-stakes.

More context: https://aws.amazon.com/blogs/database/improve-aws-dms-continuous-replication-performance-by-using-column-filters-to-parallelize-high-volume-tables/
Agree or disagree?